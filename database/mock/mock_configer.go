// Code generated by MockGen. DO NOT EDIT.
// Source: configer.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConfiger is a mock of Configer interface
type MockConfiger struct {
	ctrl     *gomock.Controller
	recorder *MockConfigerMockRecorder
}

// MockConfigerMockRecorder is the mock recorder for MockConfiger
type MockConfigerMockRecorder struct {
	mock *MockConfiger
}

// NewMockConfiger creates a new mock instance
func NewMockConfiger(ctrl *gomock.Controller) *MockConfiger {
	mock := &MockConfiger{ctrl: ctrl}
	mock.recorder = &MockConfigerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfiger) EXPECT() *MockConfigerMockRecorder {
	return m.recorder
}

// GetDBName mocks base method
func (m *MockConfiger) GetDBName() string {
	ret := m.ctrl.Call(m, "GetDBName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDBName indicates an expected call of GetDBName
func (mr *MockConfigerMockRecorder) GetDBName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBName", reflect.TypeOf((*MockConfiger)(nil).GetDBName))
}

// GetCollectionName mocks base method
func (m *MockConfiger) GetCollectionName() string {
	ret := m.ctrl.Call(m, "GetCollectionName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCollectionName indicates an expected call of GetCollectionName
func (mr *MockConfigerMockRecorder) GetCollectionName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionName", reflect.TypeOf((*MockConfiger)(nil).GetCollectionName))
}

// GetSocketTimeoutSecond mocks base method
func (m *MockConfiger) GetSocketTimeoutSecond() int {
	ret := m.ctrl.Call(m, "GetSocketTimeoutSecond")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetSocketTimeoutSecond indicates an expected call of GetSocketTimeoutSecond
func (mr *MockConfigerMockRecorder) GetSocketTimeoutSecond() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSocketTimeoutSecond", reflect.TypeOf((*MockConfiger)(nil).GetSocketTimeoutSecond))
}
